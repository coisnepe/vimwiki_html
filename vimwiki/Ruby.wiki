== Ruby ==
- [[#Array|Array]]
- [[#Enumerator|Enumerator]]
- [[#Files&Directories|Files and Directories]]
- [[#csv|csv]]
- [[#Goodies|Goodies]]
  - [[#Benchmark|Benchmark]]

<br/>

=== Core library ===

==== Array ====
{{{class="ruby"
# reject values
  ["", "1", "2"].reject(&:empty?)

# Select values
  [10, 2, 1].select { |value| value >= 1 }

# Check values against condition
  [132, 12, 0.5].any? { |value| value > 1 }

# Select a random value
  %w(one two three).sample

# Sort hashes
  [{ age: 12, name: "John" }, { age: 21, name: "Betty" }].sort_by { |value_hash| value_hash[:age] }
}}}

<br/>

==== Enumerator ====
{{{class="ruby"
(1..4).each_with_object([]) { |item, ob| ob << item * 10 }
> [10, 20, 30, 40]
}}}

<br />

==== Files&Directories ====

Directories

{{{class="ruby"
Dir.pwd                             # Current directory
Dir.chdir "take_me_home/directory/" # Change directory
Dir.glob("*")                       # Array of files' name in pwd
Dir.glob('dir_name/**/*.{avi,m4a}') # Every avi and m4a files, including in sub-directories
Dir["/target_directory/*"]          # Array of files' path + name
}}}


Files

{{{class="ruby"
File.basename("my_code.rb")
}}}

<br/>

=== csv ===

Nuclear csv parsing: never see the dreaded `invalid byte sequence` error ever again

{{{class="ruby"
csv_file = File.read(file)
               .encode("UTF-8", "binary", invalid: :replace, undef: :replace, replace: "")
CSV.parse(csv_file, col_sep: ";", force_quotes: true, encoding: "utf-8")
}}}



<br />
==== Goodies ====

{{{class="ruby"
# Execute unix commands using backticks `. Returns a string
`wc -l line_count.csv`
}}}

<br/>

===== Benchmark =====
{{{class="ruby"
require "benchmark"

puts Benchmark.measure { "something".capitalize }

iterations = 1_000

Benchmark.bm(iterations) do |bm|
  bm.report "message here" do
    "something".capitalize
  end

  bm.report "another convoluted method" do
    "something"[0].upcase + "something"[1..-1]
  end
end
}}}
